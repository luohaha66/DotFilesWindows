[user]
	name = xx
	email = xx@xx

[gui]
    encoding = utf-8

[i18n]
    commitencoding = utf-8

[svn]
    pathnameencoding = utf-8

[core]
    quotepath = false

[credential]
	helper = store

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# List contributors with number of commits.
	contributors = shortlog --summary --numbered
	# Show the user email for the current repository.
	whoami = config user.email

[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[core]
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	# Maximum number of bytes to map simultaneously into memory from pack files
	packedGitLimit = 512m
	# Number of bytes of a pack file to map into memory in a single mapping operation
	packedGitWindowSize = 512m

[pack]
	# The maximum memory in bytes used for caching deltas
	# in git-pack-objects before writing them out to a pack
	deltaCacheSize = 2047m
	# Maximum size of a pack
	packSizeLimit = 2047m
	# The maximum size of memory that is consumed by each thread in
	# git-pack-objects for pack window memory when no limit is given on the command line
	windowMemory = 2047m

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = green
	changed = red
	untracked = cyan

[diff]
	# Detect copies as well as renames.
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[init]
	defaultBranch = dev
